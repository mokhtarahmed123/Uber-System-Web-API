// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uber.Uber;

#nullable disable

namespace Uber.Migrations
{
    [DbContext(typeof(UberContext))]
    [Migration("20250912043545_RemoveTable")]
    partial class RemoveTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleAppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleAppId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Uber.Uber.Complaints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgainstUserId")
                        .HasColumnType("int");

                    b.Property<int>("FromUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AgainstUserId");

                    b.HasIndex("FromUserID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<double>("DropoffLat")
                        .HasColumnType("float");

                    b.Property<double>("DropoffLng")
                        .HasColumnType("float");

                    b.Property<double>("PickupLat")
                        .HasColumnType("float");

                    b.Property<double>("PickupLng")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverID");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MerchantID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustometID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("MerchantID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("totalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustometID");

                    b.HasIndex("ItemID");

                    b.HasIndex("MerchantID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("Massege")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("customerID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.RideRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("DestinationLat")
                        .HasColumnType("float");

                    b.Property<double>("DestinationLng")
                        .HasColumnType("float");

                    b.Property<double>("PickupLat")
                        .HasColumnType("float");

                    b.Property<double>("PickupLng")
                        .HasColumnType("float");

                    b.Property<int>("RideRequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("RiderID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("RiderID");

                    b.HasIndex("UserId");

                    b.ToTable("RideRequests");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Uber.Uber.DriverProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DriverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LicenseImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.ToTable("DriverProfiles");
                });

            modelBuilder.Entity("Uber.Uber.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Merchantid")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.Property<int>("customerid")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Merchantid");

                    b.HasIndex("TripID");

                    b.HasIndex("customerid");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Uber.Uber.Trip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CarImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<double>("DurationMin")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("RideRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatausTrip")
                        .HasColumnType("int");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DriverId");

                    b.HasIndex("OrderID");

                    b.HasIndex("RideRequestId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("customerId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.RoleApp", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("RoleApp");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.RoleApp", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleAppId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uber.Uber.Complaints", b =>
                {
                    b.HasOne("Uber.Uber.DriverProfile", "Driver")
                        .WithMany("ComplaintsReceived")
                        .HasForeignKey("AgainstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.Customer", "FromUser")
                        .WithMany("Complaints")
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Trip", "Trip")
                        .WithMany("Complaints")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("ComplaintsAgainstUser")
                        .HasForeignKey("UserId");

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("ComplaintsFromUser")
                        .HasForeignKey("UserId1");

                    b.Navigation("Driver");

                    b.Navigation("FromUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.User", "UserApp")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Delivery", b =>
                {
                    b.HasOne("Uber.Uber.DriverProfile", "Driver")
                        .WithMany("Deliveries")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Trip", "trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("Delivery")
                        .HasForeignKey("UserId");

                    b.Navigation("Driver");

                    b.Navigation("trip");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Item", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.Category", "category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.Merchant", "merchant")
                        .WithMany("Items")
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("merchant");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Merchant", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.User", "UserApp")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Order", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.Customer", "user")
                        .WithMany("Order")
                        .HasForeignKey("CustometID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.Item", "item")
                        .WithMany("Order")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.Merchant", "merchant")
                        .WithMany("Orders")
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("Order")
                        .HasForeignKey("UserId");

                    b.Navigation("item");

                    b.Navigation("merchant");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Reviews", b =>
                {
                    b.HasOne("Uber.Uber.DriverProfile", "Driver")
                        .WithMany("reviews")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Trip", "Trip")
                        .WithMany("Reviews")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("ReviewsFromUser")
                        .HasForeignKey("UserId");

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("ReviewsToUser")
                        .HasForeignKey("UserId1");

                    b.HasOne("Uber.Uber.Domain.Entities.Customer", "customer")
                        .WithMany("Reviews")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trip");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.RideRequest", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.Customer", "Rider")
                        .WithMany("RideRequest")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("RideRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.User", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.RoleApp", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Uber.Uber.DriverProfile", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.User", "user")
                        .WithMany("DriverProfile")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Uber.Uber.Payment", b =>
                {
                    b.HasOne("Uber.Uber.Domain.Entities.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("Merchantid");

                    b.HasOne("Uber.Uber.Trip", "Trip_Id")
                        .WithMany("Payments")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.Customer", "customer")
                        .WithMany("Payment")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("Trip_Id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Uber.Uber.Trip", b =>
                {
                    b.HasOne("Uber.Uber.DriverProfile", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uber.Uber.Domain.Entities.Order", "order")
                        .WithMany("Trips")
                        .HasForeignKey("OrderID");

                    b.HasOne("Uber.Uber.Domain.Entities.RideRequest", "RideRequest")
                        .WithMany("Trips")
                        .HasForeignKey("RideRequestId");

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("TripsAsRider")
                        .HasForeignKey("UserId");

                    b.HasOne("Uber.Uber.Domain.Entities.User", null)
                        .WithMany("TripsAsDriver")
                        .HasForeignKey("UserId1");

                    b.HasOne("Uber.Uber.Domain.Entities.Customer", "customer")
                        .WithMany("trip")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("RideRequest");

                    b.Navigation("customer");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Order");

                    b.Navigation("Payment");

                    b.Navigation("Reviews");

                    b.Navigation("RideRequest");

                    b.Navigation("trip");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Item", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Merchant", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.Order", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.RideRequest", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.User", b =>
                {
                    b.Navigation("ComplaintsAgainstUser");

                    b.Navigation("ComplaintsFromUser");

                    b.Navigation("Delivery");

                    b.Navigation("DriverProfile");

                    b.Navigation("Order");

                    b.Navigation("ReviewsFromUser");

                    b.Navigation("ReviewsToUser");

                    b.Navigation("RideRequests");

                    b.Navigation("TripsAsDriver");

                    b.Navigation("TripsAsRider");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Uber.Uber.DriverProfile", b =>
                {
                    b.Navigation("ComplaintsReceived");

                    b.Navigation("Deliveries");

                    b.Navigation("Trips");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("Uber.Uber.Trip", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Uber.Uber.Domain.Entities.RoleApp", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
